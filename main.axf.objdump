
C:/Users/Andrew/OneDrive/Geneva College/CPE 490/Projects/Lab8/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	f4 04 00 00 00 05 00 00 0c 05 00 00 18 05 00 00     ................
      30:	24 05 00 00 ac 10 00 00 a4 04 00 00 30 05 00 00     $...........0...

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb0003db 	bl	1048 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00001194 	.word	0x00001194

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	000015f0 	.word	0x000015f0

00000124 <__cs3_heap_start_ptr>:
     124:	00001620 	.word	0x00001620

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	000015f8 	.word	0x000015f8
     170:	000015fb 	.word	0x000015fb
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	000015f8 	.word	0x000015f8
     1bc:	000015f8 	.word	0x000015f8
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	000015f8 	.word	0x000015f8
     200:	00000000 	.word	0x00000000
     204:	00001138 	.word	0x00001138

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001138 	.word	0x00001138
     250:	000015fc 	.word	0x000015fc
     254:	00001198 	.word	0x00001198
     258:	00000000 	.word	0x00000000

0000025c <main>:
unsigned int period = 1000; //1000 microseconds in 1 millisecond
int PWM_mode = 0; //0 = output off; 1 = output on
int Remaining_Time = 0; //Remaining time when PWM switches

int main(void)
{
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
	//Prepare JP2 directional control
	*JP2_DIR = 0x1;
     264:	e30131b8 	movw	r3, #4536	; 0x11b8
     268:	e3403000 	movt	r3, #0
     26c:	e5933000 	ldr	r3, [r3]
     270:	e3a02001 	mov	r2, #1
     274:	e5832000 	str	r2, [r3]
	//Prepare interrupts
	disable_A9_interrupts();
     278:	eb0000af 	bl	53c <disable_A9_interrupts>
	set_A9_IRQ_stack();
     27c:	eb0000b8 	bl	564 <set_A9_IRQ_stack>
	config_GIC();
     280:	eb0000d3 	bl	5d4 <config_GIC>
	enable_A9_interrupts();
     284:	eb0000c8 	bl	5ac <enable_A9_interrupts>
	*HPS_Ctrl = 0x3; //Enable interrupts, enable autoload, enable clock
     288:	e30131a8 	movw	r3, #4520	; 0x11a8
     28c:	e3403000 	movt	r3, #0
     290:	e5933000 	ldr	r3, [r3]
     294:	e3a02003 	mov	r2, #3
     298:	e5832000 	str	r2, [r3]
	while (1) //Wait for an interrupt
	{
		;
	}
     29c:	eafffffe 	b	29c <main+0x40>

000002a0 <Get_Percent>:
}
	
float Get_Percent()
{
     2a0:	e92d4800 	push	{r11, lr}
     2a4:	e28db004 	add	r11, sp, #4
     2a8:	e24dd008 	sub	sp, sp, #8
	//Read Switches
	float percent = 0.0f;
     2ac:	e3a03000 	mov	r3, #0
     2b0:	e50b3008 	str	r3, [r11, #-8]
	float switch_value = (*switches & 0x3FF); //Get the present switch value
     2b4:	e30131a0 	movw	r3, #4512	; 0x11a0
     2b8:	e3403000 	movt	r3, #0
     2bc:	e5933000 	ldr	r3, [r3]
     2c0:	e5933000 	ldr	r3, [r3]
     2c4:	e1a03b03 	lsl	r3, r3, #22
     2c8:	e1a03b23 	lsr	r3, r3, #22
     2cc:	e1a00003 	mov	r0, r3
     2d0:	eb000185 	bl	8ec <__aeabi_i2f>
     2d4:	e1a03000 	mov	r3, r0
     2d8:	e50b300c 	str	r3, [r11, #-12]
	percent = (switch_value / 1023) * 100.0; //Get the percent of 1023
     2dc:	e51b000c 	ldr	r0, [r11, #-12]
     2e0:	e3a01903 	mov	r1, #49152	; 0xc000
     2e4:	e344147f 	movt	r1, #17535	; 0x447f
     2e8:	eb00021c 	bl	b60 <__aeabi_fdiv>
     2ec:	e1a03000 	mov	r3, r0
     2f0:	e1a00003 	mov	r0, r3
     2f4:	e3a01000 	mov	r1, #0
     2f8:	e34412c8 	movt	r1, #17096	; 0x42c8
     2fc:	eb0001b1 	bl	9c8 <__aeabi_fmul>
     300:	e1a03000 	mov	r3, r0
     304:	e50b3008 	str	r3, [r11, #-8]
	return percent;
     308:	e51b3008 	ldr	r3, [r11, #-8]
}
     30c:	e1a00003 	mov	r0, r3
     310:	e24bd004 	sub	sp, r11, #4
     314:	e8bd8800 	pop	{r11, pc}

00000318 <Set_PWM>:

void Set_PWM(unsigned int period, float percent1)
{
     318:	e92d4800 	push	{r11, lr}
     31c:	e28db004 	add	r11, sp, #4
     320:	e24dd010 	sub	sp, sp, #16
     324:	e50b0010 	str	r0, [r11, #-16]
     328:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	//float switch_value = (int) (*switches & 0x3FF); //Get the present switch value
	//percent = (switch_value / 1023) * 100.0; //Get the percent of 1023
	if (PWM_mode == 0)
     32c:	e3013614 	movw	r3, #5652	; 0x1614
     330:	e3403000 	movt	r3, #0
     334:	e5933000 	ldr	r3, [r3]
     338:	e3530000 	cmp	r3, #0
     33c:	1a000031 	bne	408 <Set_PWM+0xf0>
	{
		int time = 0;
     340:	e3a03000 	mov	r3, #0
     344:	e50b3008 	str	r3, [r11, #-8]
		PWM_mode = 1; //Flag that output is ON
     348:	e3013614 	movw	r3, #5652	; 0x1614
     34c:	e3403000 	movt	r3, #0
     350:	e3a02001 	mov	r2, #1
     354:	e5832000 	str	r2, [r3]
		time = (int) (percent1 * period); //Find ON time in microseconds
     358:	e51b0010 	ldr	r0, [r11, #-16]
     35c:	eb000160 	bl	8e4 <__aeabi_ui2f>
     360:	e1a03000 	mov	r3, r0
     364:	e1a00003 	mov	r0, r3
     368:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     36c:	eb000195 	bl	9c8 <__aeabi_fmul>
     370:	e1a03000 	mov	r3, r0
     374:	e1a00003 	mov	r0, r3
     378:	eb000250 	bl	cc0 <__aeabi_f2iz>
     37c:	e1a03000 	mov	r3, r0
     380:	e50b3008 	str	r3, [r11, #-8]
		Remaining_Time = ((period * 100) - time); //Find OFF time in microseconds
     384:	e51b3010 	ldr	r3, [r11, #-16]
     388:	e3a02064 	mov	r2, #100	; 0x64
     38c:	e0020392 	mul	r2, r2, r3
     390:	e51b3008 	ldr	r3, [r11, #-8]
     394:	e0633002 	rsb	r3, r3, r2
     398:	e1a02003 	mov	r2, r3
     39c:	e3013618 	movw	r3, #5656	; 0x1618
     3a0:	e3403000 	movt	r3, #0
     3a4:	e5832000 	str	r2, [r3]
		*HPS_Ctrl = 0x2; //Enable interrupts, autoload, and disable clock
     3a8:	e30131a8 	movw	r3, #4520	; 0x11a8
     3ac:	e3403000 	movt	r3, #0
     3b0:	e5933000 	ldr	r3, [r3]
     3b4:	e3a02002 	mov	r2, #2
     3b8:	e5832000 	str	r2, [r3]
		*HPS_Load = time;
     3bc:	e30131a4 	movw	r3, #4516	; 0x11a4
     3c0:	e3403000 	movt	r3, #0
     3c4:	e5933000 	ldr	r3, [r3]
     3c8:	e51b2008 	ldr	r2, [r11, #-8]
     3cc:	e5832000 	str	r2, [r3]
		*HPS_Ctrl = 0x3; //Enable interrupts, autoload, and clock
     3d0:	e30131a8 	movw	r3, #4520	; 0x11a8
     3d4:	e3403000 	movt	r3, #0
     3d8:	e5933000 	ldr	r3, [r3]
     3dc:	e3a02003 	mov	r2, #3
     3e0:	e5832000 	str	r2, [r3]
		if (time != 0)
     3e4:	e51b3008 	ldr	r3, [r11, #-8]
     3e8:	e3530000 	cmp	r3, #0
     3ec:	0a000005 	beq	408 <Set_PWM+0xf0>
		{
			*JP2 = 0x1; //Enables Output
     3f0:	e30131b4 	movw	r3, #4532	; 0x11b4
     3f4:	e3403000 	movt	r3, #0
     3f8:	e5933000 	ldr	r3, [r3]
     3fc:	e3a02001 	mov	r2, #1
     400:	e5832000 	str	r2, [r3]
			return;
     404:	ea000024 	b	49c <Set_PWM+0x184>
		}
	}
	if (PWM_mode == 1)
     408:	e3013614 	movw	r3, #5652	; 0x1614
     40c:	e3403000 	movt	r3, #0
     410:	e5933000 	ldr	r3, [r3]
     414:	e3530001 	cmp	r3, #1
     418:	1a00001f 	bne	49c <Set_PWM+0x184>
	{
		PWM_mode = 0; //Flag that Output is OFF
     41c:	e3013614 	movw	r3, #5652	; 0x1614
     420:	e3403000 	movt	r3, #0
     424:	e3a02000 	mov	r2, #0
     428:	e5832000 	str	r2, [r3]
		*HPS_Ctrl = 0x2; //Enable interrupts, enable autoload, and disable clock
     42c:	e30131a8 	movw	r3, #4520	; 0x11a8
     430:	e3403000 	movt	r3, #0
     434:	e5933000 	ldr	r3, [r3]
     438:	e3a02002 	mov	r2, #2
     43c:	e5832000 	str	r2, [r3]
		*HPS_Load = Remaining_Time;
     440:	e30131a4 	movw	r3, #4516	; 0x11a4
     444:	e3403000 	movt	r3, #0
     448:	e5932000 	ldr	r2, [r3]
     44c:	e3013618 	movw	r3, #5656	; 0x1618
     450:	e3403000 	movt	r3, #0
     454:	e5933000 	ldr	r3, [r3]
     458:	e5823000 	str	r3, [r2]
		*HPS_Ctrl = 0x3; //Enable interrupts, autoload, and clock
     45c:	e30131a8 	movw	r3, #4520	; 0x11a8
     460:	e3403000 	movt	r3, #0
     464:	e5933000 	ldr	r3, [r3]
     468:	e3a02003 	mov	r2, #3
     46c:	e5832000 	str	r2, [r3]
		if (Remaining_Time != 0)
     470:	e3013618 	movw	r3, #5656	; 0x1618
     474:	e3403000 	movt	r3, #0
     478:	e5933000 	ldr	r3, [r3]
     47c:	e3530000 	cmp	r3, #0
     480:	0a000004 	beq	498 <Set_PWM+0x180>
		{
			*JP2 = 0x0; //Disables output
     484:	e30131b4 	movw	r3, #4532	; 0x11b4
     488:	e3403000 	movt	r3, #0
     48c:	e5933000 	ldr	r3, [r3]
     490:	e3a02000 	mov	r2, #0
     494:	e5832000 	str	r2, [r3]
		}
		return;
     498:	e1a00000 	nop			; (mov r0, r0)
	}
}
     49c:	e24bd004 	sub	sp, r11, #4
     4a0:	e8bd8800 	pop	{r11, pc}

000004a4 <__cs3_isr_irq>:
void config_interrupt (int, int);


// Define the IRQ exception handler
void __attribute__ ((interrupt)) __cs3_isr_irq (void)
{
     4a4:	e24ee004 	sub	lr, lr, #4
     4a8:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     4ac:	e28db018 	add	r11, sp, #24
     4b0:	e24dd00c 	sub	sp, sp, #12
	// Read the ICCIAR from the CPU interface in the GIC
	int address;
	int interrupt_ID;
	
	address = MPCORE_GIC_CPUIF + ICCIAR;
     4b4:	e30c310c 	movw	r3, #49420	; 0xc10c
     4b8:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     4bc:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	interrupt_ID = *(int *)address;
     4c0:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     4c4:	e5933000 	ldr	r3, [r3]
     4c8:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
   
	clock_ISR (); //Do the ISR 
     4cc:	eb000086 	bl	6ec <clock_ISR>

	// Write to the End of Interrupt Register (ICCEOIR)
	address = MPCORE_GIC_CPUIF + ICCEOIR;
     4d0:	e30c3110 	movw	r3, #49424	; 0xc110
     4d4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     4d8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	*(int *)address = interrupt_ID;
     4dc:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     4e0:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
     4e4:	e5832000 	str	r2, [r3]

	return;
     4e8:	e1a00000 	nop			; (mov r0, r0)
} 
     4ec:	e24bd018 	sub	sp, r11, #24
     4f0:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

000004f4 <__cs3_reset>:

// Define the remaining exception handlers
void __attribute__ ((interrupt)) __cs3_reset (void)
{
     4f4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     4f8:	e28db000 	add	r11, sp, #0
    while(1);
     4fc:	eafffffe 	b	4fc <__cs3_reset+0x8>

00000500 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void)
{
     500:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     504:	e28db000 	add	r11, sp, #0
    while(1);
     508:	eafffffe 	b	508 <__cs3_isr_undef+0x8>

0000050c <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void)
{
     50c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     510:	e28db000 	add	r11, sp, #0
    while(1);
     514:	eafffffe 	b	514 <__cs3_isr_swi+0x8>

00000518 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void)
{
     518:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     51c:	e28db000 	add	r11, sp, #0
    while(1);
     520:	eafffffe 	b	520 <__cs3_isr_pabort+0x8>

00000524 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void)
{
     524:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     528:	e28db000 	add	r11, sp, #0
    while(1);
     52c:	eafffffe 	b	52c <__cs3_isr_dabort+0x8>

00000530 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void)
{
     530:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     534:	e28db000 	add	r11, sp, #0
    while(1);
     538:	eafffffe 	b	538 <__cs3_isr_fiq+0x8>

0000053c <disable_A9_interrupts>:

/* 
 * Turn off interrupts in the ARM processor
*/
void disable_A9_interrupts(void)
{
     53c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     540:	e28db000 	add	r11, sp, #0
     544:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     548:	e3a030d3 	mov	r3, #211	; 0xd3
     54c:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     550:	e51b3008 	ldr	r3, [r11, #-8]
     554:	e129f003 	msr	CPSR_fc, r3
}
     558:	e28bd000 	add	sp, r11, #0
     55c:	e8bd0800 	ldmfd	sp!, {r11}
     560:	e12fff1e 	bx	lr

00000564 <set_A9_IRQ_stack>:

/* 
 * Initialize the banked stack pointer register for IRQ mode
*/
void set_A9_IRQ_stack(void)
{
     564:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     568:	e28db000 	add	r11, sp, #0
     56c:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = A9_ONCHIP_END - 7;		// top of A9 onchip memory, aligned to 8 bytes
     570:	e3e03007 	mvn	r3, #7
     574:	e50b3008 	str	r3, [r11, #-8]
	/* change processor to IRQ mode with interrupts disabled */
	mode = INT_DISABLE | IRQ_MODE;
     578:	e3a030d2 	mov	r3, #210	; 0xd2
     57c:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     580:	e51b300c 	ldr	r3, [r11, #-12]
     584:	e129f003 	msr	CPSR_fc, r3
	/* set banked stack pointer */
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     588:	e51b3008 	ldr	r3, [r11, #-8]
     58c:	e1a0d003 	mov	sp, r3

	/* go back to SVC mode before executing subroutine return! */
	mode = INT_DISABLE | SVC_MODE;
     590:	e3a030d3 	mov	r3, #211	; 0xd3
     594:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     598:	e51b300c 	ldr	r3, [r11, #-12]
     59c:	e129f003 	msr	CPSR_fc, r3
}
     5a0:	e28bd000 	add	sp, r11, #0
     5a4:	e8bd0800 	ldmfd	sp!, {r11}
     5a8:	e12fff1e 	bx	lr

000005ac <enable_A9_interrupts>:

/* 
 * Turn on interrupts in the ARM processor
*/
void enable_A9_interrupts(void)
{
     5ac:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     5b0:	e28db000 	add	r11, sp, #0
     5b4:	e24dd00c 	sub	sp, sp, #12
	int status = SVC_MODE | INT_ENABLE;
     5b8:	e3a03053 	mov	r3, #83	; 0x53
     5bc:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     5c0:	e51b3008 	ldr	r3, [r11, #-8]
     5c4:	e129f003 	msr	CPSR_fc, r3
}
     5c8:	e28bd000 	add	sp, r11, #0
     5cc:	e8bd0800 	ldmfd	sp!, {r11}
     5d0:	e12fff1e 	bx	lr

000005d4 <config_GIC>:

/* 
 * Configure the Generic Interrupt Controller (GIC)
*/
void config_GIC(void)
{
     5d4:	e92d4800 	push	{r11, lr}
     5d8:	e28db004 	add	r11, sp, #4
     5dc:	e24dd008 	sub	sp, sp, #8
	int address;
	config_interrupt (199, CPU0);    // configure the HPS Timer 0 interrupt
     5e0:	e3a000c7 	mov	r0, #199	; 0xc7
     5e4:	e3a01001 	mov	r1, #1
     5e8:	eb000013 	bl	63c <config_interrupt>

  	// Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all priorities 
	address = MPCORE_GIC_CPUIF + ICCPMR;
     5ec:	e30c3104 	movw	r3, #49412	; 0xc104
     5f0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     5f4:	e50b3008 	str	r3, [r11, #-8]
  	*(int *) address = 0xFFFF;       
     5f8:	e51b3008 	ldr	r3, [r11, #-8]
     5fc:	e30f2fff 	movw	r2, #65535	; 0xffff
     600:	e5832000 	str	r2, [r3]

  	// Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
	address = MPCORE_GIC_CPUIF + ICCICR;
     604:	e3a03cc1 	mov	r3, #49408	; 0xc100
     608:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     60c:	e50b3008 	str	r3, [r11, #-8]
  	*(int *) address = 1;       
     610:	e51b3008 	ldr	r3, [r11, #-8]
     614:	e3a02001 	mov	r2, #1
     618:	e5832000 	str	r2, [r3]

	// Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs 
	address = MPCORE_GIC_DIST + ICDDCR;
     61c:	e3a03a0d 	mov	r3, #53248	; 0xd000
     620:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     624:	e50b3008 	str	r3, [r11, #-8]
  	*(int *) address = 1;          
     628:	e51b3008 	ldr	r3, [r11, #-8]
     62c:	e3a02001 	mov	r2, #1
     630:	e5832000 	str	r2, [r3]
}
     634:	e24bd004 	sub	sp, r11, #4
     638:	e8bd8800 	pop	{r11, pc}

0000063c <config_interrupt>:
 * We configure only the Interrupt Set Enable Registers (ICDISERn) and Interrupt 
 * Processor Target Registers (ICDIPTRn). The default (reset) values are used for 
 * other registers in the GIC
*/
void config_interrupt (int N, int CPU_target)
{
     63c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     640:	e28db000 	add	r11, sp, #0
     644:	e24dd01c 	sub	sp, sp, #28
     648:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     64c:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset, index, value, address;
    
	/* Configure the Interrupt Set-Enable Registers (ICDISERn). 
	 * reg_offset = (integer_div(N / 32) * 4
	 * value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC; 
     650:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     654:	e1a031c3 	asr	r3, r3, #3
     658:	e3c33003 	bic	r3, r3, #3
     65c:	e50b3008 	str	r3, [r11, #-8]
	index = N & 0x1F;
     660:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     664:	e203301f 	and	r3, r3, #31
     668:	e50b300c 	str	r3, [r11, #-12]
	value = 0x1 << index;
     66c:	e3a02001 	mov	r2, #1
     670:	e51b300c 	ldr	r3, [r11, #-12]
     674:	e1a03312 	lsl	r3, r2, r3
     678:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     67c:	e51b3008 	ldr	r3, [r11, #-8]
     680:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     684:	e2433c03 	sub	r3, r3, #768	; 0x300
     688:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	/* Now that we know the register address and value, set the appropriate bit */
   *(int *)address |= value;
     68c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     690:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     694:	e5921000 	ldr	r1, [r2]
     698:	e51b2010 	ldr	r2, [r11, #-16]
     69c:	e1812002 	orr	r2, r1, r2
     6a0:	e5832000 	str	r2, [r3]

	/* Configure the Interrupt Processor Targets Register (ICDIPTRn)
	 * reg_offset = integer_div(N / 4) * 4
	 * index = N mod 4 */
	reg_offset = (N & 0xFFFFFFFC);
     6a4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     6a8:	e3c33003 	bic	r3, r3, #3
     6ac:	e50b3008 	str	r3, [r11, #-8]
	index = N & 0x3;
     6b0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     6b4:	e2033003 	and	r3, r3, #3
     6b8:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     6bc:	e51b2008 	ldr	r2, [r11, #-8]
     6c0:	e51b300c 	ldr	r3, [r11, #-12]
     6c4:	e0823003 	add	r3, r2, r3
     6c8:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     6cc:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	/* Now that we know the register address and value, write to (only) the appropriate byte */
	*(char *)address = (char) CPU_target;
     6d0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     6d4:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     6d8:	e6ef2072 	uxtb	r2, r2
     6dc:	e5c32000 	strb	r2, [r3]
}
     6e0:	e28bd000 	add	sp, r11, #0
     6e4:	e8bd0800 	ldmfd	sp!, {r11}
     6e8:	e12fff1e 	bx	lr

000006ec <clock_ISR>:
 * Clock - Interrupt Service Routine                                
 *                                                                          
 * Controls the PWM output
 ***************************************************************************************/
void clock_ISR( void )
{
     6ec:	e92d4818 	push	{r3, r4, r11, lr}
     6f0:	e28db00c 	add	r11, sp, #12
	*HPS_EOI; //Clear End of Interrupt
	Set_PWM(period, Get_Percent());
     6f4:	e30131bc 	movw	r3, #4540	; 0x11bc
     6f8:	e3403000 	movt	r3, #0
     6fc:	e5934000 	ldr	r4, [r3]
     700:	ebfffee6 	bl	2a0 <Get_Percent>
     704:	e1a03000 	mov	r3, r0
     708:	e1a00004 	mov	r0, r4
     70c:	e1a01003 	mov	r1, r3
     710:	ebffff00 	bl	318 <Set_PWM>
	return;
     714:	e1a00000 	nop			; (mov r0, r0)
}
     718:	e8bd8818 	pop	{r3, r4, r11, pc}

0000071c <__aeabi_frsub>:
     71c:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
     720:	ea000000 	b	728 <__addsf3>

00000724 <__aeabi_fsub>:
     724:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00000728 <__addsf3>:
     728:	e1b02080 	lsls	r2, r0, #1
     72c:	11b03081 	lslsne	r3, r1, #1
     730:	11320003 	teqne	r2, r3
     734:	11f0cc42 	mvnsne	r12, r2, asr #24
     738:	11f0cc43 	mvnsne	r12, r3, asr #24
     73c:	0a000047 	beq	860 <__addsf3+0x138>
     740:	e1a02c22 	lsr	r2, r2, #24
     744:	e0723c23 	rsbs	r3, r2, r3, lsr #24
     748:	c0822003 	addgt	r2, r2, r3
     74c:	c0201001 	eorgt	r1, r0, r1
     750:	c0210000 	eorgt	r0, r1, r0
     754:	c0201001 	eorgt	r1, r0, r1
     758:	b2633000 	rsblt	r3, r3, #0
     75c:	e3530019 	cmp	r3, #25
     760:	812fff1e 	bxhi	lr
     764:	e3100102 	tst	r0, #-2147483648	; 0x80000000
     768:	e3800502 	orr	r0, r0, #8388608	; 0x800000
     76c:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
     770:	12600000 	rsbne	r0, r0, #0
     774:	e3110102 	tst	r1, #-2147483648	; 0x80000000
     778:	e3811502 	orr	r1, r1, #8388608	; 0x800000
     77c:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
     780:	12611000 	rsbne	r1, r1, #0
     784:	e1320003 	teq	r2, r3
     788:	0a00002e 	beq	848 <__addsf3+0x120>
     78c:	e2422001 	sub	r2, r2, #1
     790:	e0900351 	adds	r0, r0, r1, asr r3
     794:	e2633020 	rsb	r3, r3, #32
     798:	e1a01311 	lsl	r1, r1, r3
     79c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
     7a0:	5a000001 	bpl	7ac <__addsf3+0x84>
     7a4:	e2711000 	rsbs	r1, r1, #0
     7a8:	e2e00000 	rsc	r0, r0, #0
     7ac:	e3500502 	cmp	r0, #8388608	; 0x800000
     7b0:	3a00000b 	bcc	7e4 <__addsf3+0xbc>
     7b4:	e3500401 	cmp	r0, #16777216	; 0x1000000
     7b8:	3a000004 	bcc	7d0 <__addsf3+0xa8>
     7bc:	e1b000a0 	lsrs	r0, r0, #1
     7c0:	e1a01061 	rrx	r1, r1
     7c4:	e2822001 	add	r2, r2, #1
     7c8:	e35200fe 	cmp	r2, #254	; 0xfe
     7cc:	2a000038 	bcs	8b4 <__addsf3+0x18c>
     7d0:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
     7d4:	e0a00b82 	adc	r0, r0, r2, lsl #23
     7d8:	03c00001 	biceq	r0, r0, #1
     7dc:	e1800003 	orr	r0, r0, r3
     7e0:	e12fff1e 	bx	lr
     7e4:	e1b01081 	lsls	r1, r1, #1
     7e8:	e0a00000 	adc	r0, r0, r0
     7ec:	e3100502 	tst	r0, #8388608	; 0x800000
     7f0:	e2422001 	sub	r2, r2, #1
     7f4:	1afffff5 	bne	7d0 <__addsf3+0xa8>
     7f8:	e1b0c620 	lsrs	r12, r0, #12
     7fc:	01a00600 	lsleq	r0, r0, #12
     800:	0242200c 	subeq	r2, r2, #12
     804:	e31008ff 	tst	r0, #16711680	; 0xff0000
     808:	01a00400 	lsleq	r0, r0, #8
     80c:	02422008 	subeq	r2, r2, #8
     810:	e310060f 	tst	r0, #15728640	; 0xf00000
     814:	01a00200 	lsleq	r0, r0, #4
     818:	02422004 	subeq	r2, r2, #4
     81c:	e3100503 	tst	r0, #12582912	; 0xc00000
     820:	01a00100 	lsleq	r0, r0, #2
     824:	02422002 	subeq	r2, r2, #2
     828:	e3500502 	cmp	r0, #8388608	; 0x800000
     82c:	31a00080 	lslcc	r0, r0, #1
     830:	e2d22000 	sbcs	r2, r2, #0
     834:	a0800b82 	addge	r0, r0, r2, lsl #23
     838:	b2622000 	rsblt	r2, r2, #0
     83c:	a1800003 	orrge	r0, r0, r3
     840:	b1830230 	orrlt	r0, r3, r0, lsr r2
     844:	e12fff1e 	bx	lr
     848:	e3320000 	teq	r2, #0
     84c:	e2211502 	eor	r1, r1, #8388608	; 0x800000
     850:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
     854:	02822001 	addeq	r2, r2, #1
     858:	12433001 	subne	r3, r3, #1
     85c:	eaffffca 	b	78c <__addsf3+0x64>
     860:	e1a03081 	lsl	r3, r1, #1
     864:	e1f0cc42 	mvns	r12, r2, asr #24
     868:	11f0cc43 	mvnsne	r12, r3, asr #24
     86c:	0a000013 	beq	8c0 <__addsf3+0x198>
     870:	e1320003 	teq	r2, r3
     874:	0a000002 	beq	884 <__addsf3+0x15c>
     878:	e3320000 	teq	r2, #0
     87c:	01a00001 	moveq	r0, r1
     880:	e12fff1e 	bx	lr
     884:	e1300001 	teq	r0, r1
     888:	13a00000 	movne	r0, #0
     88c:	112fff1e 	bxne	lr
     890:	e31204ff 	tst	r2, #-16777216	; 0xff000000
     894:	1a000002 	bne	8a4 <__addsf3+0x17c>
     898:	e1b00080 	lsls	r0, r0, #1
     89c:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
     8a0:	e12fff1e 	bx	lr
     8a4:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
     8a8:	32800502 	addcc	r0, r0, #8388608	; 0x800000
     8ac:	312fff1e 	bxcc	lr
     8b0:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
     8b4:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
     8b8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
     8bc:	e12fff1e 	bx	lr
     8c0:	e1f02c42 	mvns	r2, r2, asr #24
     8c4:	11a00001 	movne	r0, r1
     8c8:	01f03c43 	mvnseq	r3, r3, asr #24
     8cc:	11a01000 	movne	r1, r0
     8d0:	e1b02480 	lsls	r2, r0, #9
     8d4:	01b03481 	lslseq	r3, r1, #9
     8d8:	01300001 	teqeq	r0, r1
     8dc:	13800501 	orrne	r0, r0, #4194304	; 0x400000
     8e0:	e12fff1e 	bx	lr

000008e4 <__aeabi_ui2f>:
     8e4:	e3a03000 	mov	r3, #0
     8e8:	ea000001 	b	8f4 <__aeabi_i2f+0x8>

000008ec <__aeabi_i2f>:
     8ec:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
     8f0:	42600000 	rsbmi	r0, r0, #0
     8f4:	e1b0c000 	movs	r12, r0
     8f8:	012fff1e 	bxeq	lr
     8fc:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
     900:	e1a01000 	mov	r1, r0
     904:	e3a00000 	mov	r0, #0
     908:	ea00000f 	b	94c <__aeabi_l2f+0x30>

0000090c <__aeabi_ul2f>:
     90c:	e1902001 	orrs	r2, r0, r1
     910:	012fff1e 	bxeq	lr
     914:	e3a03000 	mov	r3, #0
     918:	ea000005 	b	934 <__aeabi_l2f+0x18>

0000091c <__aeabi_l2f>:
     91c:	e1902001 	orrs	r2, r0, r1
     920:	012fff1e 	bxeq	lr
     924:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
     928:	5a000001 	bpl	934 <__aeabi_l2f+0x18>
     92c:	e2700000 	rsbs	r0, r0, #0
     930:	e2e11000 	rsc	r1, r1, #0
     934:	e1b0c001 	movs	r12, r1
     938:	01a0c000 	moveq	r12, r0
     93c:	01a01000 	moveq	r1, r0
     940:	03a00000 	moveq	r0, #0
     944:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
     948:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
     94c:	e2433502 	sub	r3, r3, #8388608	; 0x800000
     950:	e3a02017 	mov	r2, #23
     954:	e35c0801 	cmp	r12, #65536	; 0x10000
     958:	21a0c82c 	lsrcs	r12, r12, #16
     95c:	22422010 	subcs	r2, r2, #16
     960:	e35c0c01 	cmp	r12, #256	; 0x100
     964:	21a0c42c 	lsrcs	r12, r12, #8
     968:	22422008 	subcs	r2, r2, #8
     96c:	e35c0010 	cmp	r12, #16
     970:	21a0c22c 	lsrcs	r12, r12, #4
     974:	22422004 	subcs	r2, r2, #4
     978:	e35c0004 	cmp	r12, #4
     97c:	22422002 	subcs	r2, r2, #2
     980:	304220ac 	subcc	r2, r2, r12, lsr #1
     984:	e05221ac 	subs	r2, r2, r12, lsr #3
     988:	e0433b82 	sub	r3, r3, r2, lsl #23
     98c:	ba000006 	blt	9ac <__aeabi_l2f+0x90>
     990:	e0833211 	add	r3, r3, r1, lsl r2
     994:	e1a0c210 	lsl	r12, r0, r2
     998:	e2622020 	rsb	r2, r2, #32
     99c:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
     9a0:	e0a30230 	adc	r0, r3, r0, lsr r2
     9a4:	03c00001 	biceq	r0, r0, #1
     9a8:	e12fff1e 	bx	lr
     9ac:	e2822020 	add	r2, r2, #32
     9b0:	e1a0c211 	lsl	r12, r1, r2
     9b4:	e2622020 	rsb	r2, r2, #32
     9b8:	e190008c 	orrs	r0, r0, r12, lsl #1
     9bc:	e0a30231 	adc	r0, r3, r1, lsr r2
     9c0:	01c00fac 	biceq	r0, r0, r12, lsr #31
     9c4:	e12fff1e 	bx	lr

000009c8 <__aeabi_fmul>:
     9c8:	e3a0c0ff 	mov	r12, #255	; 0xff
     9cc:	e01c2ba0 	ands	r2, r12, r0, lsr #23
     9d0:	101c3ba1 	andsne	r3, r12, r1, lsr #23
     9d4:	1132000c 	teqne	r2, r12
     9d8:	1133000c 	teqne	r3, r12
     9dc:	0a00003e 	beq	adc <__aeabi_fmul+0x114>
     9e0:	e0822003 	add	r2, r2, r3
     9e4:	e020c001 	eor	r12, r0, r1
     9e8:	e1b00480 	lsls	r0, r0, #9
     9ec:	11b01481 	lslsne	r1, r1, #9
     9f0:	0a000010 	beq	a38 <__aeabi_fmul+0x70>
     9f4:	e3a03302 	mov	r3, #134217728	; 0x8000000
     9f8:	e18302a0 	orr	r0, r3, r0, lsr #5
     9fc:	e18312a1 	orr	r1, r3, r1, lsr #5
     a00:	e0813190 	umull	r3, r1, r0, r1
     a04:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
     a08:	e3510502 	cmp	r1, #8388608	; 0x800000
     a0c:	31a01081 	lslcc	r1, r1, #1
     a10:	31811fa3 	orrcc	r1, r1, r3, lsr #31
     a14:	31a03083 	lslcc	r3, r3, #1
     a18:	e1800001 	orr	r0, r0, r1
     a1c:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
     a20:	e35200fd 	cmp	r2, #253	; 0xfd
     a24:	8a00000f 	bhi	a68 <__aeabi_fmul+0xa0>
     a28:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
     a2c:	e0a00b82 	adc	r0, r0, r2, lsl #23
     a30:	03c00001 	biceq	r0, r0, #1
     a34:	e12fff1e 	bx	lr
     a38:	e3300000 	teq	r0, #0
     a3c:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
     a40:	01a01481 	lsleq	r1, r1, #9
     a44:	e18c04a0 	orr	r0, r12, r0, lsr #9
     a48:	e18004a1 	orr	r0, r0, r1, lsr #9
     a4c:	e252207f 	subs	r2, r2, #127	; 0x7f
     a50:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
     a54:	c1800b82 	orrgt	r0, r0, r2, lsl #23
     a58:	c12fff1e 	bxgt	lr
     a5c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
     a60:	e3a03000 	mov	r3, #0
     a64:	e2522001 	subs	r2, r2, #1
     a68:	ca000035 	bgt	b44 <__aeabi_fmul+0x17c>
     a6c:	e3720019 	cmn	r2, #25
     a70:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
     a74:	d12fff1e 	bxle	lr
     a78:	e2622000 	rsb	r2, r2, #0
     a7c:	e1b01080 	lsls	r1, r0, #1
     a80:	e1a01231 	lsr	r1, r1, r2
     a84:	e2622020 	rsb	r2, r2, #32
     a88:	e1a0c210 	lsl	r12, r0, r2
     a8c:	e1b00061 	rrxs	r0, r1
     a90:	e2a00000 	adc	r0, r0, #0
     a94:	e193308c 	orrs	r3, r3, r12, lsl #1
     a98:	01c00fac 	biceq	r0, r0, r12, lsr #31
     a9c:	e12fff1e 	bx	lr
     aa0:	e3320000 	teq	r2, #0
     aa4:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
     aa8:	01a00080 	lsleq	r0, r0, #1
     aac:	03100502 	tsteq	r0, #8388608	; 0x800000
     ab0:	02422001 	subeq	r2, r2, #1
     ab4:	0afffffb 	beq	aa8 <__aeabi_fmul+0xe0>
     ab8:	e180000c 	orr	r0, r0, r12
     abc:	e3330000 	teq	r3, #0
     ac0:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
     ac4:	01a01081 	lsleq	r1, r1, #1
     ac8:	03110502 	tsteq	r1, #8388608	; 0x800000
     acc:	02433001 	subeq	r3, r3, #1
     ad0:	0afffffb 	beq	ac4 <__aeabi_fmul+0xfc>
     ad4:	e181100c 	orr	r1, r1, r12
     ad8:	eaffffc0 	b	9e0 <__aeabi_fmul+0x18>
     adc:	e00c3ba1 	and	r3, r12, r1, lsr #23
     ae0:	e132000c 	teq	r2, r12
     ae4:	1133000c 	teqne	r3, r12
     ae8:	0a000005 	beq	b04 <__aeabi_fmul+0x13c>
     aec:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
     af0:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
     af4:	1affffe9 	bne	aa0 <__aeabi_fmul+0xd8>
     af8:	e0200001 	eor	r0, r0, r1
     afc:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
     b00:	e12fff1e 	bx	lr
     b04:	e3300000 	teq	r0, #0
     b08:	13300102 	teqne	r0, #-2147483648	; 0x80000000
     b0c:	01a00001 	moveq	r0, r1
     b10:	13310000 	teqne	r1, #0
     b14:	13310102 	teqne	r1, #-2147483648	; 0x80000000
     b18:	0a00000d 	beq	b54 <__aeabi_fmul+0x18c>
     b1c:	e132000c 	teq	r2, r12
     b20:	1a000001 	bne	b2c <__aeabi_fmul+0x164>
     b24:	e1b02480 	lsls	r2, r0, #9
     b28:	1a000009 	bne	b54 <__aeabi_fmul+0x18c>
     b2c:	e133000c 	teq	r3, r12
     b30:	1a000002 	bne	b40 <__aeabi_fmul+0x178>
     b34:	e1b03481 	lsls	r3, r1, #9
     b38:	11a00001 	movne	r0, r1
     b3c:	1a000004 	bne	b54 <__aeabi_fmul+0x18c>
     b40:	e0200001 	eor	r0, r0, r1
     b44:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
     b48:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
     b4c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
     b50:	e12fff1e 	bx	lr
     b54:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
     b58:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
     b5c:	e12fff1e 	bx	lr

00000b60 <__aeabi_fdiv>:
     b60:	e3a0c0ff 	mov	r12, #255	; 0xff
     b64:	e01c2ba0 	ands	r2, r12, r0, lsr #23
     b68:	101c3ba1 	andsne	r3, r12, r1, lsr #23
     b6c:	1132000c 	teqne	r2, r12
     b70:	1133000c 	teqne	r3, r12
     b74:	0a00003a 	beq	c64 <__aeabi_fdiv+0x104>
     b78:	e0422003 	sub	r2, r2, r3
     b7c:	e020c001 	eor	r12, r0, r1
     b80:	e1b01481 	lsls	r1, r1, #9
     b84:	e1a00480 	lsl	r0, r0, #9
     b88:	0a00001c 	beq	c00 <__aeabi_fdiv+0xa0>
     b8c:	e3a03201 	mov	r3, #268435456	; 0x10000000
     b90:	e1831221 	orr	r1, r3, r1, lsr #4
     b94:	e1833220 	orr	r3, r3, r0, lsr #4
     b98:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
     b9c:	e1530001 	cmp	r3, r1
     ba0:	31a03083 	lslcc	r3, r3, #1
     ba4:	e2a2207d 	adc	r2, r2, #125	; 0x7d
     ba8:	e3a0c502 	mov	r12, #8388608	; 0x800000
     bac:	e1530001 	cmp	r3, r1
     bb0:	20433001 	subcs	r3, r3, r1
     bb4:	2180000c 	orrcs	r0, r0, r12
     bb8:	e15300a1 	cmp	r3, r1, lsr #1
     bbc:	204330a1 	subcs	r3, r3, r1, lsr #1
     bc0:	218000ac 	orrcs	r0, r0, r12, lsr #1
     bc4:	e1530121 	cmp	r3, r1, lsr #2
     bc8:	20433121 	subcs	r3, r3, r1, lsr #2
     bcc:	2180012c 	orrcs	r0, r0, r12, lsr #2
     bd0:	e15301a1 	cmp	r3, r1, lsr #3
     bd4:	204331a1 	subcs	r3, r3, r1, lsr #3
     bd8:	218001ac 	orrcs	r0, r0, r12, lsr #3
     bdc:	e1b03203 	lsls	r3, r3, #4
     be0:	11b0c22c 	lsrsne	r12, r12, #4
     be4:	1afffff0 	bne	bac <__aeabi_fdiv+0x4c>
     be8:	e35200fd 	cmp	r2, #253	; 0xfd
     bec:	8affff9d 	bhi	a68 <__aeabi_fmul+0xa0>
     bf0:	e1530001 	cmp	r3, r1
     bf4:	e0a00b82 	adc	r0, r0, r2, lsl #23
     bf8:	03c00001 	biceq	r0, r0, #1
     bfc:	e12fff1e 	bx	lr
     c00:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
     c04:	e18c04a0 	orr	r0, r12, r0, lsr #9
     c08:	e292207f 	adds	r2, r2, #127	; 0x7f
     c0c:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
     c10:	c1800b82 	orrgt	r0, r0, r2, lsl #23
     c14:	c12fff1e 	bxgt	lr
     c18:	e3800502 	orr	r0, r0, #8388608	; 0x800000
     c1c:	e3a03000 	mov	r3, #0
     c20:	e2522001 	subs	r2, r2, #1
     c24:	eaffff8f 	b	a68 <__aeabi_fmul+0xa0>
     c28:	e3320000 	teq	r2, #0
     c2c:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
     c30:	01a00080 	lsleq	r0, r0, #1
     c34:	03100502 	tsteq	r0, #8388608	; 0x800000
     c38:	02422001 	subeq	r2, r2, #1
     c3c:	0afffffb 	beq	c30 <__aeabi_fdiv+0xd0>
     c40:	e180000c 	orr	r0, r0, r12
     c44:	e3330000 	teq	r3, #0
     c48:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
     c4c:	01a01081 	lsleq	r1, r1, #1
     c50:	03110502 	tsteq	r1, #8388608	; 0x800000
     c54:	02433001 	subeq	r3, r3, #1
     c58:	0afffffb 	beq	c4c <__aeabi_fdiv+0xec>
     c5c:	e181100c 	orr	r1, r1, r12
     c60:	eaffffc4 	b	b78 <__aeabi_fdiv+0x18>
     c64:	e00c3ba1 	and	r3, r12, r1, lsr #23
     c68:	e132000c 	teq	r2, r12
     c6c:	1a000005 	bne	c88 <__aeabi_fdiv+0x128>
     c70:	e1b02480 	lsls	r2, r0, #9
     c74:	1affffb6 	bne	b54 <__aeabi_fmul+0x18c>
     c78:	e133000c 	teq	r3, r12
     c7c:	1affffaf 	bne	b40 <__aeabi_fmul+0x178>
     c80:	e1a00001 	mov	r0, r1
     c84:	eaffffb2 	b	b54 <__aeabi_fmul+0x18c>
     c88:	e133000c 	teq	r3, r12
     c8c:	1a000003 	bne	ca0 <__aeabi_fdiv+0x140>
     c90:	e1b03481 	lsls	r3, r1, #9
     c94:	0affff97 	beq	af8 <__aeabi_fmul+0x130>
     c98:	e1a00001 	mov	r0, r1
     c9c:	eaffffac 	b	b54 <__aeabi_fmul+0x18c>
     ca0:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
     ca4:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
     ca8:	1affffde 	bne	c28 <__aeabi_fdiv+0xc8>
     cac:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
     cb0:	1affffa2 	bne	b40 <__aeabi_fmul+0x178>
     cb4:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
     cb8:	1affff8e 	bne	af8 <__aeabi_fmul+0x130>
     cbc:	eaffffa4 	b	b54 <__aeabi_fmul+0x18c>

00000cc0 <__aeabi_f2iz>:
     cc0:	e1a02080 	lsl	r2, r0, #1
     cc4:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
     cc8:	3a000008 	bcc	cf0 <__aeabi_f2iz+0x30>
     ccc:	e3a0309e 	mov	r3, #158	; 0x9e
     cd0:	e0532c22 	subs	r2, r3, r2, lsr #24
     cd4:	9a000007 	bls	cf8 <__aeabi_f2iz+0x38>
     cd8:	e1a03400 	lsl	r3, r0, #8
     cdc:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
     ce0:	e3100102 	tst	r0, #-2147483648	; 0x80000000
     ce4:	e1a00233 	lsr	r0, r3, r2
     ce8:	12600000 	rsbne	r0, r0, #0
     cec:	e12fff1e 	bx	lr
     cf0:	e3a00000 	mov	r0, #0
     cf4:	e12fff1e 	bx	lr
     cf8:	e3720061 	cmn	r2, #97	; 0x61
     cfc:	1a000001 	bne	d08 <__aeabi_f2iz+0x48>
     d00:	e1b02480 	lsls	r2, r0, #9
     d04:	1a000002 	bne	d14 <__aeabi_f2iz+0x54>
     d08:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
     d0c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
     d10:	e12fff1e 	bx	lr
     d14:	e3a00000 	mov	r0, #0
     d18:	e12fff1e 	bx	lr

00000d1c <atexit>:
     d1c:	e1a01000 	mov	r1, r0
     d20:	e3a00000 	mov	r0, #0
     d24:	e92d4008 	push	{r3, lr}
     d28:	e1a02000 	mov	r2, r0
     d2c:	e1a03000 	mov	r3, r0
     d30:	eb00000e 	bl	d70 <__register_exitproc>
     d34:	e8bd4008 	pop	{r3, lr}
     d38:	e12fff1e 	bx	lr

00000d3c <exit>:
     d3c:	e92d4008 	push	{r3, lr}
     d40:	e3a01000 	mov	r1, #0
     d44:	e1a04000 	mov	r4, r0
     d48:	eb000045 	bl	e64 <__call_exitprocs>
     d4c:	e59f3018 	ldr	r3, [pc, #24]	; d6c <exit+0x30>
     d50:	e5930000 	ldr	r0, [r3]
     d54:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     d58:	e3530000 	cmp	r3, #0
     d5c:	11a0e00f 	movne	lr, pc
     d60:	112fff13 	bxne	r3
     d64:	e1a00004 	mov	r0, r4
     d68:	eb0000c9 	bl	1094 <_exit>
     d6c:	0000113c 	.word	0x0000113c

00000d70 <__register_exitproc>:
     d70:	e59fc0e4 	ldr	r12, [pc, #228]	; e5c <__register_exitproc+0xec>
     d74:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     d78:	e59c4000 	ldr	r4, [r12]
     d7c:	e594c148 	ldr	r12, [r4, #328]	; 0x148
     d80:	e35c0000 	cmp	r12, #0
     d84:	0284cf53 	addeq	r12, r4, #332	; 0x14c
     d88:	e59c5004 	ldr	r5, [r12, #4]
     d8c:	0584c148 	streq	r12, [r4, #328]	; 0x148
     d90:	e355001f 	cmp	r5, #31
     d94:	e24dd010 	sub	sp, sp, #16
     d98:	e1a06000 	mov	r6, r0
     d9c:	da000015 	ble	df8 <__register_exitproc+0x88>
     da0:	e59f00b8 	ldr	r0, [pc, #184]	; e60 <__register_exitproc+0xf0>
     da4:	e3500000 	cmp	r0, #0
     da8:	1a000001 	bne	db4 <__register_exitproc+0x44>
     dac:	e3e00000 	mvn	r0, #0
     db0:	ea000018 	b	e18 <__register_exitproc+0xa8>
     db4:	e3a00e19 	mov	r0, #400	; 0x190
     db8:	e58d100c 	str	r1, [sp, #12]
     dbc:	e58d2008 	str	r2, [sp, #8]
     dc0:	e58d3004 	str	r3, [sp, #4]
     dc4:	e320f000 	nop	{0}
     dc8:	e250c000 	subs	r12, r0, #0
     dcc:	e59d100c 	ldr	r1, [sp, #12]
     dd0:	e59d2008 	ldr	r2, [sp, #8]
     dd4:	e59d3004 	ldr	r3, [sp, #4]
     dd8:	0afffff3 	beq	dac <__register_exitproc+0x3c>
     ddc:	e5945148 	ldr	r5, [r4, #328]	; 0x148
     de0:	e3a00000 	mov	r0, #0
     de4:	e58c0004 	str	r0, [r12, #4]
     de8:	e58c5000 	str	r5, [r12]
     dec:	e584c148 	str	r12, [r4, #328]	; 0x148
     df0:	e58c0188 	str	r0, [r12, #392]	; 0x188
     df4:	e58c018c 	str	r0, [r12, #396]	; 0x18c
     df8:	e3560000 	cmp	r6, #0
     dfc:	e59c4004 	ldr	r4, [r12, #4]
     e00:	1a000007 	bne	e24 <__register_exitproc+0xb4>
     e04:	e2843002 	add	r3, r4, #2
     e08:	e2844001 	add	r4, r4, #1
     e0c:	e78c1103 	str	r1, [r12, r3, lsl #2]
     e10:	e58c4004 	str	r4, [r12, #4]
     e14:	e3a00000 	mov	r0, #0
     e18:	e28dd010 	add	sp, sp, #16
     e1c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
     e20:	e12fff1e 	bx	lr
     e24:	e3a00001 	mov	r0, #1
     e28:	e1a00410 	lsl	r0, r0, r4
     e2c:	e08c8104 	add	r8, r12, r4, lsl #2
     e30:	e3560002 	cmp	r6, #2
     e34:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
     e38:	e5883108 	str	r3, [r8, #264]	; 0x108
     e3c:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
     e40:	e1877000 	orr	r7, r7, r0
     e44:	01830000 	orreq	r0, r3, r0
     e48:	e1a05008 	mov	r5, r8
     e4c:	e5882088 	str	r2, [r8, #136]	; 0x88
     e50:	e58c7188 	str	r7, [r12, #392]	; 0x188
     e54:	058c018c 	streq	r0, [r12, #396]	; 0x18c
     e58:	eaffffe9 	b	e04 <__register_exitproc+0x94>
     e5c:	0000113c 	.word	0x0000113c
     e60:	00000000 	.word	0x00000000

00000e64 <__call_exitprocs>:
     e64:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     e68:	e59f3168 	ldr	r3, [pc, #360]	; fd8 <__call_exitprocs+0x174>
     e6c:	e5933000 	ldr	r3, [r3]
     e70:	e24dd014 	sub	sp, sp, #20
     e74:	e58d3004 	str	r3, [sp, #4]
     e78:	e2833f52 	add	r3, r3, #328	; 0x148
     e7c:	e58d0008 	str	r0, [sp, #8]
     e80:	e58d300c 	str	r3, [sp, #12]
     e84:	e1a07001 	mov	r7, r1
     e88:	e3a08001 	mov	r8, #1
     e8c:	e59d3004 	ldr	r3, [sp, #4]
     e90:	e5936148 	ldr	r6, [r3, #328]	; 0x148
     e94:	e3560000 	cmp	r6, #0
     e98:	e59db00c 	ldr	r11, [sp, #12]
     e9c:	0a000033 	beq	f70 <__call_exitprocs+0x10c>
     ea0:	e5965004 	ldr	r5, [r6, #4]
     ea4:	e2554001 	subs	r4, r5, #1
     ea8:	5286a088 	addpl	r10, r6, #136	; 0x88
     eac:	5285501f 	addpl	r5, r5, #31
     eb0:	508a5105 	addpl	r5, r10, r5, lsl #2
     eb4:	5a000007 	bpl	ed8 <__call_exitprocs+0x74>
     eb8:	ea000029 	b	f64 <__call_exitprocs+0x100>
     ebc:	e5953000 	ldr	r3, [r5]
     ec0:	e1530007 	cmp	r3, r7
     ec4:	0a000005 	beq	ee0 <__call_exitprocs+0x7c>
     ec8:	e2444001 	sub	r4, r4, #1
     ecc:	e3740001 	cmn	r4, #1
     ed0:	e2455004 	sub	r5, r5, #4
     ed4:	0a000022 	beq	f64 <__call_exitprocs+0x100>
     ed8:	e3570000 	cmp	r7, #0
     edc:	1afffff6 	bne	ebc <__call_exitprocs+0x58>
     ee0:	e5963004 	ldr	r3, [r6, #4]
     ee4:	e06a2005 	rsb	r2, r10, r5
     ee8:	e2433001 	sub	r3, r3, #1
     eec:	e0862002 	add	r2, r6, r2
     ef0:	e1530004 	cmp	r3, r4
     ef4:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
     ef8:	13a01000 	movne	r1, #0
     efc:	05864004 	streq	r4, [r6, #4]
     f00:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
     f04:	e3530000 	cmp	r3, #0
     f08:	0affffee 	beq	ec8 <__call_exitprocs+0x64>
     f0c:	e1a02418 	lsl	r2, r8, r4
     f10:	e5961188 	ldr	r1, [r6, #392]	; 0x188
     f14:	e1120001 	tst	r2, r1
     f18:	e5969004 	ldr	r9, [r6, #4]
     f1c:	0a000016 	beq	f7c <__call_exitprocs+0x118>
     f20:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
     f24:	e1120001 	tst	r2, r1
     f28:	1a000016 	bne	f88 <__call_exitprocs+0x124>
     f2c:	e59d0008 	ldr	r0, [sp, #8]
     f30:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
     f34:	e1a0e00f 	mov	lr, pc
     f38:	e12fff13 	bx	r3
     f3c:	e5963004 	ldr	r3, [r6, #4]
     f40:	e1530009 	cmp	r3, r9
     f44:	1affffd0 	bne	e8c <__call_exitprocs+0x28>
     f48:	e59b3000 	ldr	r3, [r11]
     f4c:	e1530006 	cmp	r3, r6
     f50:	1affffcd 	bne	e8c <__call_exitprocs+0x28>
     f54:	e2444001 	sub	r4, r4, #1
     f58:	e3740001 	cmn	r4, #1
     f5c:	e2455004 	sub	r5, r5, #4
     f60:	1affffdc 	bne	ed8 <__call_exitprocs+0x74>
     f64:	e59f1070 	ldr	r1, [pc, #112]	; fdc <__call_exitprocs+0x178>
     f68:	e3510000 	cmp	r1, #0
     f6c:	1a000009 	bne	f98 <__call_exitprocs+0x134>
     f70:	e28dd014 	add	sp, sp, #20
     f74:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     f78:	e12fff1e 	bx	lr
     f7c:	e1a0e00f 	mov	lr, pc
     f80:	e12fff13 	bx	r3
     f84:	eaffffec 	b	f3c <__call_exitprocs+0xd8>
     f88:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
     f8c:	e1a0e00f 	mov	lr, pc
     f90:	e12fff13 	bx	r3
     f94:	eaffffe8 	b	f3c <__call_exitprocs+0xd8>
     f98:	e5963004 	ldr	r3, [r6, #4]
     f9c:	e3530000 	cmp	r3, #0
     fa0:	e5963000 	ldr	r3, [r6]
     fa4:	1a000008 	bne	fcc <__call_exitprocs+0x168>
     fa8:	e3530000 	cmp	r3, #0
     fac:	0a000006 	beq	fcc <__call_exitprocs+0x168>
     fb0:	e1a00006 	mov	r0, r6
     fb4:	e58b3000 	str	r3, [r11]
     fb8:	e320f000 	nop	{0}
     fbc:	e59b6000 	ldr	r6, [r11]
     fc0:	e3560000 	cmp	r6, #0
     fc4:	1affffb5 	bne	ea0 <__call_exitprocs+0x3c>
     fc8:	eaffffe8 	b	f70 <__call_exitprocs+0x10c>
     fcc:	e1a0b006 	mov	r11, r6
     fd0:	e1a06003 	mov	r6, r3
     fd4:	eafffff9 	b	fc0 <__call_exitprocs+0x15c>
     fd8:	0000113c 	.word	0x0000113c
     fdc:	00000000 	.word	0x00000000

00000fe0 <register_fini>:
     fe0:	e92d4008 	push	{r3, lr}
     fe4:	e59f3010 	ldr	r3, [pc, #16]	; ffc <register_fini+0x1c>
     fe8:	e3530000 	cmp	r3, #0
     fec:	159f000c 	ldrne	r0, [pc, #12]	; 1000 <register_fini+0x20>
     ff0:	1bffff49 	blne	d1c <atexit>
     ff4:	e8bd4008 	pop	{r3, lr}
     ff8:	e12fff1e 	bx	lr
     ffc:	00001164 	.word	0x00001164
    1000:	00001004 	.word	0x00001004

00001004 <__libc_fini_array>:
    1004:	e92d4038 	push	{r3, r4, r5, lr}
    1008:	e59f5030 	ldr	r5, [pc, #48]	; 1040 <__libc_fini_array+0x3c>
    100c:	e59f4030 	ldr	r4, [pc, #48]	; 1044 <__libc_fini_array+0x40>
    1010:	e0654004 	rsb	r4, r5, r4
    1014:	e1b04144 	asrs	r4, r4, #2
    1018:	10855104 	addne	r5, r5, r4, lsl #2
    101c:	0a000004 	beq	1034 <__libc_fini_array+0x30>
    1020:	e5353004 	ldr	r3, [r5, #-4]!
    1024:	e1a0e00f 	mov	lr, pc
    1028:	e12fff13 	bx	r3
    102c:	e2544001 	subs	r4, r4, #1
    1030:	1afffffa 	bne	1020 <__libc_fini_array+0x1c>
    1034:	eb00004a 	bl	1164 <__libc_fini>
    1038:	e8bd4038 	pop	{r3, r4, r5, lr}
    103c:	e12fff1e 	bx	lr
    1040:	0000117c 	.word	0x0000117c
    1044:	00001180 	.word	0x00001180

00001048 <__cs3_premain>:
    1048:	e92d4008 	push	{r3, lr}
    104c:	eb000017 	bl	10b0 <__libc_init_array>
    1050:	e59f3030 	ldr	r3, [pc, #48]	; 1088 <__cs3_premain+0x40>
    1054:	e3530000 	cmp	r3, #0
    1058:	15930000 	ldrne	r0, [r3]
    105c:	01a00003 	moveq	r0, r3
    1060:	e59f3024 	ldr	r3, [pc, #36]	; 108c <__cs3_premain+0x44>
    1064:	e3530000 	cmp	r3, #0
    1068:	15931000 	ldrne	r1, [r3]
    106c:	01a01003 	moveq	r1, r3
    1070:	e3a02000 	mov	r2, #0
    1074:	ebfffc78 	bl	25c <main>
    1078:	e59f3010 	ldr	r3, [pc, #16]	; 1090 <__cs3_premain+0x48>
    107c:	e3530000 	cmp	r3, #0
    1080:	1bffff2d 	blne	d3c <exit>
    1084:	eafffffe 	b	1084 <__cs3_premain+0x3c>
	...
    1090:	00000d3c 	.word	0x00000d3c

00001094 <_exit>:
    1094:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1098:	e3a00018 	mov	r0, #24
    109c:	e59f1004 	ldr	r1, [pc, #4]	; 10a8 <_exit+0x14>
    10a0:	ef123456 	svc	0x00123456
    10a4:	eafffffe 	b	10a4 <_exit+0x10>
    10a8:	00020026 	.word	0x00020026

000010ac <__cs3_isr_interrupt>:
    10ac:	eafffffe 	b	10ac <__cs3_isr_interrupt>

000010b0 <__libc_init_array>:
    10b0:	e92d4070 	push	{r4, r5, r6, lr}
    10b4:	e59f506c 	ldr	r5, [pc, #108]	; 1128 <__libc_init_array+0x78>
    10b8:	e59f606c 	ldr	r6, [pc, #108]	; 112c <__libc_init_array+0x7c>
    10bc:	e0656006 	rsb	r6, r5, r6
    10c0:	e1b06146 	asrs	r6, r6, #2
    10c4:	12455004 	subne	r5, r5, #4
    10c8:	13a04000 	movne	r4, #0
    10cc:	0a000005 	beq	10e8 <__libc_init_array+0x38>
    10d0:	e5b53004 	ldr	r3, [r5, #4]!
    10d4:	e2844001 	add	r4, r4, #1
    10d8:	e1a0e00f 	mov	lr, pc
    10dc:	e12fff13 	bx	r3
    10e0:	e1560004 	cmp	r6, r4
    10e4:	1afffff9 	bne	10d0 <__libc_init_array+0x20>
    10e8:	e59f5040 	ldr	r5, [pc, #64]	; 1130 <__libc_init_array+0x80>
    10ec:	e59f6040 	ldr	r6, [pc, #64]	; 1134 <__libc_init_array+0x84>
    10f0:	e0656006 	rsb	r6, r5, r6
    10f4:	eb000012 	bl	1144 <_init>
    10f8:	e1b06146 	asrs	r6, r6, #2
    10fc:	12455004 	subne	r5, r5, #4
    1100:	13a04000 	movne	r4, #0
    1104:	0a000005 	beq	1120 <__libc_init_array+0x70>
    1108:	e5b53004 	ldr	r3, [r5, #4]!
    110c:	e2844001 	add	r4, r4, #1
    1110:	e1a0e00f 	mov	lr, pc
    1114:	e12fff13 	bx	r3
    1118:	e1560004 	cmp	r6, r4
    111c:	1afffff9 	bne	1108 <__libc_init_array+0x58>
    1120:	e8bd4070 	pop	{r4, r5, r6, lr}
    1124:	e12fff1e 	bx	lr
    1128:	0000115c 	.word	0x0000115c
    112c:	0000115c 	.word	0x0000115c
    1130:	0000115c 	.word	0x0000115c
    1134:	00001164 	.word	0x00001164

Disassembly of section .rodata:

0000113c <_global_impure_ptr>:
    113c:	000011c8 00000043                       ....C...

00001144 <_init>:
    1144:	e1a0c00d 	mov	r12, sp
    1148:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    114c:	e24cb004 	sub	r11, r12, #4
    1150:	e24bd028 	sub	sp, r11, #40	; 0x28
    1154:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1158:	e12fff1e 	bx	lr

0000115c <__init_array_start>:
    115c:	00000fe0 	.word	0x00000fe0

00001160 <__frame_dummy_init_array_entry>:
    1160:	00000208                                ....

00001164 <__libc_fini>:
    1164:	e1a0c00d 	mov	r12, sp
    1168:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    116c:	e24cb004 	sub	r11, r12, #4
    1170:	e24bd028 	sub	sp, r11, #40	; 0x28
    1174:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1178:	e12fff1e 	bx	lr

0000117c <__fini_array_start>:
    117c:	000001c4 	.word	0x000001c4

00001180 <__cs3_regions>:
	...
    118c:	000015f8 	.word	0x000015f8
    1190:	00000028 	.word	0x00000028

00001194 <__cs3_regions_end>:
    1194:	00000000 	.word	0x00000000
